# GENERAL BITS AND BOBS
# unbind -T root -aq
# unbind -T prefix -aq
# unbind -T nested -aq
# unbind -T popup -aq
# unbind -T copy-mode -aq

#source-file ~/.config/tmux/tmux.reset.conf
# set -g default-terminal "tmux-256color"
set -g default-terminal tmux-256color
#set -ag terminal-overrides ",xterm-256color:RGB"

# undercurl support
set -as terminal-overrides ',*:Smulx=\E[4::%p1%dm'

# underscore colours - needs tmux-3.0
set -as terminal-overrides ',*:Setulc=\E[58::2::%p1%{65536}%/%d::%p1%{256}%/%{255}%&%d::%p1%{255}%&%d%;m'

# set path for plugins
set-environment -g TMUX_PLUGIN_MANAGER_PATH '~/.tmux/plugins/'

# Reload tmux file
bind r source-file ~/.config/tmux/tmux.conf;  display-message -d 2000 "Configuration reloaded!"

# Clear terminal screen
bind-key l send-keys C-l

# cheat sheet
bind ? run-shell "tmux list-keys | less"

# Alternative method using a prefix
bind-key l send-keys C-l

unbind C-b
set -g prefix C-a
bind-key C-a send-prefix

# Create vertical split
bind '|' split-window -h -c "#{pane_current_path}"

# Create horizontal split
bind - split-window -v -c "#{pane_current_path}"

# create a new windows with spcific name
bind c new-window -c "$HOME"

# enable mouse in tmux
set -g mouse on

# https://github.com/3rd/image.nvim/?tab=readme-ov-file#tmux
# This is needed by the image.nvim plugin
set -gq allow-passthrough on
# This is related to the `tmux_show_only_in_active_window = true,` config in
# image.nvim
set -g visual-activity off

# set-option -g default-command "reattach-to-user-namespace -l zsh"

bind -n WheelUpPane if-shell -F -t = "#{mouse_any_flag}" "send-keys -M" "if -Ft= '#{pane_in_mode}' 'send-keys -M' 'select-pane -t=; copy-mode -e; send-keys -M'"
bind -n WheelDownPane select-pane -t= \; send-keys -M
bind -n C-WheelUpPane select-pane -t= \; copy-mode -e \; send-keys -M
bind -T copy-mode-vi    C-WheelUpPane   send-keys -X halfpage-up
bind -T copy-mode-vi    C-WheelDownPane send-keys -X halfpage-down
bind-key -T copy-mode MouseDragEnd1Pane send-keys -X copy-pipe-no-clear pbcopy
bind-key -T copy-mode-vi MouseDragEnd1Pane send-keys -X copy-pipe-no-clear pbcopy

# set clipboard
set -s set-clipboard on

# Status bar at bottom
set -g status-position top

bind -n M-v copy-mode

# Switch to windows 1 through 4
# 'p' is normally used to go to the previous window, but I won't use it
# ctrl+b c -> new window
# ctrl+b , -> rename current window
bind u select-window -t 1
bind i select-window -t 2
bind o select-window -t 3
bind p select-window -t 4

# New windows normally start at 0, but I want them to start at 1 instead
set -g base-index 1

# Imagine if you have windows 1-5, and you close window 3, you are left with
# 1,2,4,5, which is inconvenient for my navigation method seen below
# renumbering solves that issue, so if you close 3 youre left with 1-4
set -g renumber-windows on

# Resize pane with bind + mayus key
bind -r J resize-pane -D 5
bind -r K resize-pane -U 5
bind -r L resize-pane -R 5
bind -r H resize-pane -L 5

# same as zen mode
bind -r z resize-pane -Z

# Jump to beginning of the line :FIX review this later
bind a send-prefix

# Bind pane synchronization to Ctrl-b s :FIX review the
bind y setw synchronize-panes

# remove delay for exiting insert mode with ESC in Neovim
set -sg escape-time 10

# Create new session
bind S command-prompt -p "New Session:" "new-session -A -s '%%'"

# long-term sessions
bind 1 switch-client -t dotfiles
bind 2 switch-client -t obsidian-vault
bind 3 switch-client -t local
bind 4 switch-client -t aws-devops-general
bind 5 switch-client -t aws-devops-prod
bind 0 switch-client -t pi

# rename session and window
bind . command-prompt -I "rename-session "
bind , command-prompt -I "rename-window "

# Alternate session
# Switch between the last 2 tmux sessions, similar to 'cd -' in the terminal
# I use this in combination with the `choose-tree` to sort sessions by time
# Otherwise, by default, sessions are sorted by name, and that makes no sense
# -l stands for `last session`, see `man tmux`
bind-key Space switch-client -l

# When pressing prefix+s to list sessions, I want them sorted by time
# That way my latest used sessions show at the top of the list
# -s starts with sessions collapsed (doesn't show windows)
# -Z zooms the pane (don't uderstand what this does)
# -O specifies the initial sort field: one of ‚Äòindex‚Äô, ‚Äòname‚Äô, or ‚Äòtime‚Äô (activity).
# https://unix.stackexchange.com/questions/608268/how-can-i-force-tmux-to-sort-my-sessions-alphabetically
bind f choose-tree -Zs -O time

# This enables vim nagivation
# If for example I'm in the scrolling mode (yellow) can navigate with vim motions
# search with /, using v for visual mode, etc
set-window-option -g mode-keys vi

# https://github.com/leelavg/dotfiles/blob/897aa883a/config/tmux.conf#L30-L39
# https://scripter.co/command-to-every-pane-window-session-in-tmux/
# Send the same command to all panes/windows in current session
bind x command-prompt -p "Command:" \
  "run \"tmux list-panes -s -F '##{session_name}:##{window_index}.##{pane_index}' \
                | xargs -I PANE tmux send-keys -t PANE '%1' Enter\""

# Send the same command to all panes/windows/sessions
bind X command-prompt -p "Command:" \
  "run \"tmux list-panes -a -F '##{session_name}:##{window_index}.##{pane_index}' \
              | xargs -I PANE tmux send-keys -t PANE '%1' Enter\""

# Increase scroll history
set-option -g history-limit 10000

# Set the repeat time to a lower value (in milliseconds)
set-option -g repeat-time 1000

# Remove delay after escape key press
set -s escape-time 0

# Enables tracking of focus events, allows tmux to respond when the terminal
# window gains or looses focus
set-option -g focus-events on

# kill pane
bind q confirm-before -p "kill-pane #P? (y/n)" kill-pane

# dettach
bind D detach
bind : command-prompt

# mute windows sound and monitoring activity
bind -n M-b {
  set -w monitor-bell
  set -w monitor-activity
  display 'window mute #{?#{monitor-bell},off,on}'
}

# clear screen while command is running
bind C send-keys -R Enter
# bind S {
#   send-keys -R Enter
#   clear-history
# }

# move between and swap them
bind m next-window
bind -n M-n swap-window -d -t '{next}'
bind n previous-window
bind -n M-m swap-window -d -t '{previous}'

# join pane into a window
bind -n M-J {
  select-pane -m
  display 'pane marked: #{pane_id}, <prefix>V or <prefix>H'
}
bind -n M-b break-pane -a -t '{next}'

# Prompted join-pane
bind-key P command-prompt -p "join pane from: "  "join-pane -v -s '%%'"

# change layout
bind Tab next-layout

# rotate windows
bind w rotate-window

bind -n M-j select-layout main-horizontal
bind -n M-k select-layout main-vertical
# bind C-h select-layout even-horizontal
# bind C-v select-layout even-vertical

# COPY MODE :FIX review this
# bind -n C-o copy-mode
# bind -n M-p paste-buffer -p
bind -T copy-mode-vi v send-keys -X begin-selection
bind -T copy-mode-vi y send-keys -X copy-selection


# Smart pane switching with awareness of Vim splits.
# See: https://github.com/christoomey/vim-tmux-navigator
is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|l?n?vim?x?|fzf)(diff)?$'"
bind-key -n 'C-h' if-shell "$is_vim" 'send-keys C-h'  'select-pane -L'
bind-key -n 'C-j' if-shell "$is_vim" 'send-keys C-j'  'select-pane -D'
bind-key -n 'C-k' if-shell "$is_vim" 'send-keys C-k'  'select-pane -U'
bind-key -n 'C-l' if-shell "$is_vim" 'send-keys C-l'  'select-pane -R'
tmux_version='$(tmux -V | sed -En "s/^tmux ([0-9]+(.[0-9]+)?).*/\1/p")'
if-shell -b '[ "$(echo "$tmux_version < 3.0" | bc)" = 1 ]' \
    "bind-key -n 'C-\\' if-shell \"$is_vim\" 'send-keys C-\\'  'select-pane -l'"
if-shell -b '[ "$(echo "$tmux_version >= 3.0" | bc)" = 1 ]' \
    "bind-key -n 'C-\\' if-shell \"$is_vim\" 'send-keys C-\\\\'  'select-pane -l'"

bind-key -T copy-mode-vi 'C-h' select-pane -L
bind-key -T copy-mode-vi 'C-j' select-pane -D
bind-key -T copy-mode-vi 'C-k' select-pane -U
bind-key -T copy-mode-vi 'C-l' select-pane -R
bind-key -T copy-mode-vi 'C-\' select-pane -l

##################################################

##########
# run
# git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm

#########

# tpm plugin
# Press prefix + I (capital i, as in Install) to fetch the plugin.
set -g @plugin 'tmux-plugins/tpm'
#
# list of tmux plugins

bind-key "O" run-shell "sesh connect \"$(
	sesh list | fzf-tmux -p 55%,60% \
		--no-sort --ansi --border-label ' sesh ' --prompt '‚ö°  ' \
		--header '  ^a all ^t tmux ^g configs ^x zoxide ^d tmux kill ^f find' \
		--bind 'tab:down,btab:up' \
		--bind 'ctrl-a:change-prompt(‚ö°  )+reload(sesh list)' \
		--bind 'ctrl-t:change-prompt(ü™ü  )+reload(sesh list -t)' \
		--bind 'ctrl-g:change-prompt(‚öôÔ∏è  )+reload(sesh list -c)' \
		--bind 'ctrl-x:change-prompt(üìÅ  )+reload(sesh list -z)' \
		--bind 'ctrl-f:change-prompt(üîé  )+reload(fd -H -d 2 -t d -E .Trash . ~)' \
		--bind 'ctrl-d:execute(tmux kill-session -t {})+change-prompt(‚ö°  )+reload(sesh list)'
)\""

####
# for navigating between tmux panes using Ctrl-hjkl
# If you have neovim open in a tmux pane, and another tmux pane on the right,
# you won't be able to jump from neovim to the tmux pane on the right.
#
# If you want to do jump between neovim and tmux, you need to install the same
# 'vim-tmux-navigator' plugin inside neovim
set -g @plugin 'christoomey/vim-tmux-navigator'
set -g @vim_navigator_mapping_left "C-Left C-h"  # use C-h and C-Left
set -g @vim_navigator_mapping_right "C-Right C-l"
set -g @vim_navigator_mapping_up "C-k"
set -g @vim_navigator_mapping_down "C-j"
set -g @vim_navigator_mapping_prev ""  # removes the C-\ binding
### catppuccin theme configuration ##################

set -g @plugin 'catppuccin/tmux#v0.3.0'
# set -g @plugin 'catppuccin/tmux#latest'
# or frappe, macchiato, mocha
set -g @catppuccin_flavor 'mocha'

set -g @catppuccin_window_left_separator "ÓÇ∂"
set -g @catppuccin_window_right_separator "ÓÇ¥¬†"
set -g @catppuccin_window_middle_separator " ‚ñà"
set -g @catppuccin_window_number_position "right"
set -g @catppuccin_window_default_fill "number"
set -g @catppuccin_window_default_text "#W"
set -g @catppuccin_window_current_fill "number"
set -g @catppuccin_window_current_text "#W#{?window_zoomed_flag,(ÓÆÅ),}"
set -g @catppuccin_status_modules_right "directory date_time"
set -g @catppuccin_status_modules_left "session"
set -g @catppuccin_status_left_separator  " ÓÇ∂"
set -g @catppuccin_status_right_separator "ÓÇ¥ "
set -g @catppuccin_status_right_separator_inverse "no"
set -g @catppuccin_status_fill "icon"
set -g @catppuccin_status_connect_separator "no"
set -g @catppuccin_directory_text "#{b:pane_current_path}"
set -g @catppuccin_date_time_text "%H:%M"
#######################################################


# persist tmux sessions after computer restart
# https://github.com/tmux-plugins/tmux-resurrect
set -g @plugin 'tmux-plugins/tmux-resurrect'
# allow tmux-ressurect to capture pane contents
set -g @resurrect-capture-pane-contents 'on'

# automatically saves sessions for you every 15 minutes (this must be the last plugin)
# https://github.com/tmux-plugins/tmux-continuum
set -g @plugin 'tmux-plugins/tmux-continuum'
# enable tmux-continuum functionality
set -g @continuum-restore 'on'
# Set the save interval in minutes, default is 15
set -g @continuum-save-interval '15'

#
# # Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
run '~/.tmux/plugins/tpm/tpm'
