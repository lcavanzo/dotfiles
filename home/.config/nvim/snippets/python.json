{
    "f-string Print": {
        "prefix": [
            "printf"
        ],
        "body": [
            "print(f\"$1{$2}$3\")"
        ],
        "description": "Print statement using an f-string for variable interpolation"
    },
    "Python Logging Setup": {
        "prefix": [
            "pylogsetup"
        ],
        "body": [
            "import logging",
            "",
            "logging.basicConfig(",
            "    filename=\"${1:logs.txt}\",",
            "    level=logging.${2:DEBUG},",
            "    format=\"%(asctime)s - %(levelname)s - %(message)s\",",
            ")",
            "",
            "logging.disable(logging.${3:DEBUG})",
            "",
            "logging.debug(\"Start of program\")",
            "logging.critical(\"TESTING CRITICAL\")",
            "",
            "def ${4:function_name}(${5:parameters}):",
            "    ${6:pass}",
            "    return ${7:result}",
            "",
            "logging.debug(\"End of program\")"
        ],
        "description": "Setup Python logging with file output and example usage"
    },
    "Python Function with Docstring": {
        "prefix": [
            "docfunc"
        ],
        "body": [
            "def ${1:my_function}(${2:param1}, ${3:param2}) -> ${5:type}:",
            "    \"\"\"",
            "    ${6:Perform an operation on param1 and param2.}",
            "",
            "    Parameters:",
            "    ${7:param1} (${8:type}): ${9:Description of param1.}",
            "",
            "    \"\"\"",
            "    Returns:",
            "    ${10:type}: ${11:Description of the return value.}",
            "    \"\"\"",
            "    # Local variable assignment",
            "    ${12:result} = ${13:param1} ",
            "",
            "",
            "    return ${14:result}"
        ],
        "description": "Create a Python function with docstring, parameters, and a basic implementation"
    },
    "Init method": {
        "prefix": [
            "defi"
        ],
        "body": [
            "def __init__(self, ${1:param1} ${2:param2}):",
            "    self.${1:param1} = ${1:param1}",
            "    ${3}"
        ],
        "description": "Create an __init__ method with parameters"
    },
    "class template": {
        "prefix": "classi",
        "body": [
            "class ${1:ClassName}($2):",
            "\t\"\"\"${3:docstring for $1.}\"\"\"",
            "\tdef __init__(self, ${4:arg}):",
            "\t\tself.$4 = $4$0"
        ],
        "description": "Class definition template"
    }
}
